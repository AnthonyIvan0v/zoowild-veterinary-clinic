{"mappings":"gfAAA,ICCUA,EDCS,IAAI,EAFvBC,EAAA,SAEuBC,SAAO,eAAgB,CAC1CC,OAAQ,OACRC,YAAY,EACZC,MAAM,EACNC,UAAW,WACXC,MAAO,IACPC,WAAY,CACRC,QAAQ,EACRC,cAAc,EACdC,aAAc,GACdC,YAAa,GAEjBC,SAAU,CACNC,MAAO,IACPC,mBAAmB,GAEvBC,WAAY,CACRC,GAAI,qBACJC,KAAM,UACNC,WAAW,EACXC,mBAAoB,EACpBC,aAAc,UACdC,WAAY,4BAGhBC,GAAI,CACAC,KAAM,WAAY,EAClBC,YAAa,WACT,IACMC,EAAeC,SAASC,cAC1B,4BAEEC,GAJSC,KAIaC,UAAY,GACnCC,WACAC,SAAS,EAAG,KACbP,IACAA,EAAaQ,YAAcL,E,KEtC3CF,SAASQ,iBAAiB,oBAAoB,WAC1C,IAAMC,EAAkBT,SAASU,iBAAiB,WAClDD,EAAgBE,SAAQ,SAAArB,GACpBA,EAAGsB,cAAgBC,SAASvB,EAAGiB,YAAYO,QAAO,OAAS,IAAK,IACjCxB,EAA5BiB,YAAc,G,IAErB,IAAMQ,EAAW,IAAIC,sBACjB,SAACC,EAASC,GACND,EAAQN,SAAQ,SAAAQ,GACZ,GAAIA,EAAMC,eAAgB,CACtB,IAAMC,EAAUF,EAAMG,OAChBC,EAAeF,EAAQT,cAC7BY,YAAW,W,OAY3B,SAAsBH,EAASC,GAC3B,IACMG,EAAYH,EAAU,MACxBI,EAAU,EACd,SAASC,KACLD,GAAWD,GACGH,GACVD,EAAQd,YAAcqB,KAAKC,KAAKH,GAASI,iBACzCC,sBAAsBJ,IACnBN,EAAQd,YAAce,EAAOQ,gB,CAExCH,G,CAvB6BK,CAAaX,EAASE,E,GAAe,KACtDL,EAASe,UAAUZ,E,OAI/B,CACIa,UAAW,KAGnBzB,EAAgBE,SAAQ,SAAArB,GACpByB,EAASoB,QAAQ7C,E,QDrBfjB,EAAO,CACT+D,oBAAqBpC,SAASC,cAC1B,8BAEJoC,aAAcrC,SAASC,cAAc,yBACrCqC,SAAUtC,SAASC,cAAc,cACjCsC,UAAWvC,SAASC,cAAc,iBAGjCmC,oBAAoB5B,iBAAiB,SAE1C,WACInC,EAAKgE,aAAaG,UAAUC,OAAO,aACnCpE,EAAKiE,SAASE,UAAUC,OAAO,aAC/BpE,EAAKkE,UAAUC,UAAUC,OAAO,Y,yKEfvC,WACG,IAAMpE,EAAO,CAMTqE,WAAY1C,SAASC,cAAc,sBACnC0C,cAAe3C,SAASC,cAAc,0BAEtC2C,kBAAmB5C,SAASC,cAAc,wBAY9C5B,EAAKqE,WAAWlC,iBAAiB,UAEjC,SAAyBqC,GACrBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMvB,OACb0B,EAAeH,EAAMvB,OAAO2B,SAC5BC,EAAOF,EAAaE,KAAKC,MACzBC,EAAQJ,EAAaI,MAAMD,MAC3BE,EAAQL,EAAaM,YAAYH,MACjCI,EAAqBP,EAAaQ,sBAAsBL,MAC9D,GACa,KAATD,GACU,KAAVE,GACU,KAAVC,GACuB,KAAvBE,EAEA,OAAOE,MAAM,wCAEjBV,EAAKW,QACLrF,EAAKuE,kBAAkBJ,UAAUC,OAAO,aACxCpE,EAAKsE,cAAcH,UAAUC,OAAO,aACpCzC,SAAS2D,KAAKnB,UAAUC,OAAO,a,GAEtC,CA7CA,E","sources":["src/js/slider.js","src/js/openBlockInfoCEO.js","src/js/counter_services.js","src/js/openModalWindowPostForm.js"],"sourcesContent":["import Swiper from 'swiper/swiper-bundle.min.mjs';\n\nconst cubeSlider = new Swiper('.cube-slider', {\n    effect: 'cube',\n    grabCursor: true,\n    loop: true,\n    direction: 'vertical',\n    speed: 4000,\n    cubeEffect: {\n        shadow: true,\n        slideShadows: false,\n        shadowOffset: 40,\n        shadowScale: 1,\n    },\n    autoplay: {\n        delay: 5000,\n        pauseOnMouseEnter: true,\n    },\n    pagination: {\n        el: '.swiper-pagination',\n        type: 'bullets',\n        clickable: true,\n        dynamicMainBullets: 4,\n        currentClass: '.active',\n        totalClass: '.swiper-pagination-total',\n    },\n\n    on: {\n        init: function () {},\n        slideChange: function () {\n            const swiper = this;\n            const currentSlide = document.querySelector(\n                '.swiper-pagination-total'\n            );\n            const slideNumber = (swiper.realIndex + 1)\n                .toString()\n                .padStart(2, '0');\n            if (currentSlide) {\n                currentSlide.textContent = slideNumber;\n            }\n        },\n    },\n});\n\n// const initializeSwiper = () => {\n//     const swiper = new Swiper('.mySwiper', {\n\n//         autoplay: true, // Отключаем автоплей изначально\n//         navigation: {\n//             nextEl: '.btnY',\n//             prevEl: '.swiper-button-prev',\n//         },\n//         on: {\n//             init: function () {},\n//             slideChange: function () {\n//                 const swiper = this;\n//                 const currentSlide = document.querySelector('.count');\n//                 const slideNumber = (swiper.realIndex + 1)\n//                     .toString()\n//                     .padStart(2, '0');\n//                 if (currentSlide) {\n//                     currentSlide.textContent = slideNumber;\n//                 }\n//             },\n//             autoplayStart: function () {},\n//             autoplayStop: function () {},\n//         },\n//     });\n\n//     // Запускаем автоплей через 10 секунд\n//     setTimeout(() => {\n//         swiper.params.autoplay = {\n//             delay: 500, // Устанавливаем задержку между сменой слайдов\n//             disableOnInteraction: false,\n//         };\n//         swiper.autoplay.start(); // Запускаем автоплей\n//     }, 1000);\n\n//     const slideNumber = 3;\n//     const nextButtons = document.querySelectorAll('.moreBtn');\n//     nextButtons.forEach(button => {\n//         button.addEventListener('click', () => {\n//             swiper.slideTo(slideNumber);\n//         });\n//     });\n//     return swiper;\n// };\n\n// initializeSwiper();\n","(() => {\n    const refs = {\n        openBlockInfoCeoBtn: document.querySelector(\n            '[data-open-block-info-ceo]'\n        ),\n        blockInfoCEO: document.querySelector('[data-block-info-ceo]'),\n        iconPlus: document.querySelector('.icon-plus'),\n        iconMinus: document.querySelector('.icon-minus'),\n    };\n\n    refs.openBlockInfoCeoBtn.addEventListener('click', toggle);\n\n    function toggle() {\n        refs.blockInfoCEO.classList.toggle('is-hidden');\n        refs.iconPlus.classList.toggle('is-hidden');\n        refs.iconMinus.classList.toggle('is-hidden');\n    }\n})();\n","document.addEventListener('DOMContentLoaded', function () {\n    const counterElements = document.querySelectorAll('.number');\n    counterElements.forEach(el => {\n        el.originalValue = parseInt(el.textContent.replace(/\\s+/g, ''), 10); // Сохранение оригинального значения\n        el.textContent = '0'; // Установка начального значения в ноль\n    });\n    const observer = new IntersectionObserver(\n        (entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    const element = entry.target;\n                    const targetNumber = element.originalValue;\n                    setTimeout(() => startCounter(element, targetNumber), 500);\n                    observer.unobserve(element);\n                }\n            });\n        },\n        {\n            threshold: 0.1,\n        }\n    );\n    counterElements.forEach(el => {\n        observer.observe(el);\n    });\n    function startCounter(element, target) {\n        const duration = 1500; // Длительность анимации в миллисекундах\n        const increment = target / (duration / 16); // Обновление каждые 16 мс (приблизительно 60 fps)\n        let current = 0;\n        function updateCounter() {\n            current += increment;\n            if (current < target) {\n                element.textContent = Math.ceil(current).toLocaleString();\n                requestAnimationFrame(updateCounter);\n            } else element.textContent = target.toLocaleString();\n        }\n        updateCounter();\n    }\n});\n","(() => {\n    const refs = {\n        // openModalFormBTN: document.querySelectorAll('[data-open-modal-form]'),\n        // closeModalFormBTN: document.querySelector('[data-close-modal-form]'),\n        // closePostModalFormBTN: document.querySelector(\n        //     '[data-close-post-modal-form]'\n        // ),\n        formFooter: document.querySelector('[data-form-footer]'),\n        postModalForm: document.querySelector('[data-modal-post-form]'),\n        // form: document.querySelector('[data-form]'),\n        secondaryBackdrop: document.querySelector('.backdrop_secondary'),\n        // linkBack: document.querySelector('.link_back'),\n    };\n\n    // refs.openModalFormBTN.forEach(elem =>\n    //     elem.addEventListener('click', toggleModal)\n    // );\n    // refs.closeModalFormBTN.addEventListener('click', toggleModal);\n\n    // refs.linkBack.addEventListener('click', togglePostModalForm);\n    // refs.closePostModalFormBTN.addEventListener('click', togglePostModalForm);\n\n    refs.formFooter.addEventListener('submit', checkFormFooter);\n\n    function checkFormFooter(event) {\n        event.preventDefault();\n        const form = event.target;\n        const formElements = event.target.elements;\n        const name = formElements.name.value;\n        const email = formElements.email.value;\n        const phone = formElements.phoneNumber.value;\n        const agreePrivacyPolicy = formElements.confirm_policy_footer.value;\n        if (\n            name === '' ||\n            email === '' ||\n            phone === '' ||\n            agreePrivacyPolicy === ''\n        ) {\n            return alert('Будь ласка, заповніть всі поля форми');\n        }\n        form.reset();\n        refs.secondaryBackdrop.classList.toggle('is-hidden');\n        refs.postModalForm.classList.toggle('is-hidden');\n        document.body.classList.toggle('not-scroll');\n    }\n})();\n"],"names":["refs","parcelRequire","default","effect","grabCursor","loop","direction","speed","cubeEffect","shadow","slideShadows","shadowOffset","shadowScale","autoplay","delay","pauseOnMouseEnter","pagination","el","type","clickable","dynamicMainBullets","currentClass","totalClass","on","init","slideChange","currentSlide","document","querySelector","slideNumber","this","realIndex","toString","padStart","textContent","addEventListener","counterElements","querySelectorAll","forEach","originalValue","parseInt","replace","observer1","IntersectionObserver","entries","observer","entry","isIntersecting","element","target","targetNumber","setTimeout","increment","current","updateCounter","Math","ceil","toLocaleString","requestAnimationFrame","startCounter","unobserve","threshold","observe","openBlockInfoCeoBtn","blockInfoCEO","iconPlus","iconMinus","classList","toggle","formFooter","postModalForm","secondaryBackdrop","event","preventDefault","form","formElements","elements","name","value","email","phone","phoneNumber","agreePrivacyPolicy","confirm_policy_footer","alert","reset","body"],"version":3,"file":"index.fa65aa6d.js.map"}