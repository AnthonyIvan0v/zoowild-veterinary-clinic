{"mappings":"oeAAAA,EAAA,SCAAC,SAASC,iBAAiB,oBAAoB,WAC1C,MAAMC,EAAkBF,SAASG,iBAAiB,WAClDD,EAAgBE,SAAQC,IACpBA,EAAGC,cAAgBC,SAASF,EAAGG,YAAYC,QAAO,OAAS,IAAK,IACjCJ,EAA5BG,YAAc,GAAG,IAExB,MAAME,EAAW,IAAIC,sBACjB,CAACC,EAASC,KACND,EAAQR,SAAQU,IACZ,GAAIA,EAAMC,eAAgB,CACtB,MAAMC,EAAUF,EAAMG,OAChBC,EAAeF,EAAQV,cAC7Ba,YAAW,IAY3B,SAAsBH,EAASC,GAC3B,MACMG,EAAYH,EAAU,MAC5B,IAAII,EAAU,EACd,SAASC,IACLD,GAAWD,EACPC,EAAUJ,GACVD,EAAQR,YAAce,KAAKC,KAAKH,GAASI,iBACzCC,sBAAsBJ,IACnBN,EAAQR,YAAcS,EAAOQ,gB,CAExCH,G,CAvB6BK,CAAaX,EAASE,IAAe,KACtDL,EAASe,UAAUZ,E,IAEzB,GAEN,CACIa,UAAW,KAGnB3B,EAAgBE,SAAQC,IACpBK,EAASoB,QAAQzB,EAAG,G,mJCtB3B,MACG,MAAM0B,EAAO,CACTC,gCAAiChC,SAASG,iBACtC,gCAEJ8B,YAAajC,SAASG,iBAAiB,uBACvC+B,mBAAoBlC,SAASG,iBACzB,+BAEJgC,4BAA6BnC,SAASG,iBAClC,6BAEJiC,yCACIpC,SAASG,iBAAiB,qBAGlC4B,EAAKI,4BAA4B/B,SAAQ,CAACiC,EAAMC,IAC5CD,EAAKE,aAAa,KAAMD,KAE5BP,EAAKK,yCAAyChC,SAAQ,CAACiC,EAAMC,IACzDD,EAAKE,aAAa,KAAMD,KAE5BP,EAAKK,yCAAyChC,SAAQ,CAACiC,EAAMC,IACzDD,EAAKpC,iBAAiB,SAAS,KAAMuC,OA2CjBC,EA3CgCH,EA4CpDP,EAAKI,4BAA4BM,GAAIC,UAAUC,OAC3C,gCAGAZ,EAAKK,yCACDK,GACFjC,YAAYoC,SAAS,UAEjBb,EAADK,yCAAyCK,GAAIjC,YAC9C,YAEKuB,EAAJK,yCAAyCK,GAAIjC,YAC9C,iBAbZ,IAAwBiC,CA3CsC,MAG9DV,EAAKE,YAAY7B,SAAQ,CAACiC,EAAMC,IAAUD,EAAKE,aAAa,KAAMD,KAClEP,EAAKC,gCAAgC5B,SAAQ,CAACiC,EAAMC,IAChDD,EAAKE,aAAa,KAAMD,KAG5BP,EAAKC,gCAAgC5B,SAAQ,CAACiC,EAAMC,IAChDD,EAAKpC,iBAAiB,SAAS,IAGnC,SAA8BwC,GACDI,MAAMC,KAAKf,EAAKE,aACxB7B,SAAQ,CAACiC,EAAMC,KACxBA,IAAUG,EACVJ,EAAKK,UAAUC,OAAO,gCAEtBN,EAAKK,UAAUK,OAAO,+BAA+B,IAI7BF,MAAMC,KAAKf,EAAKG,oBACxB9B,SAAQ,CAACiC,EAAMC,KAC/BA,IAAUG,EACVJ,EAAKK,UAAUC,OAAO,gBAEtBN,EAAKK,UAAUK,OAAO,eAAe,IAIAF,MAAMC,KAC/Cf,EAAKC,iCAE4B5B,SAAQ,CAACiC,EAAMC,KAC5CA,IAAUG,EACVJ,EAAKK,UAAUC,OAAO,yBAEtBN,EAAKK,UAAUK,OAAO,wBAAwB,G,CA7BjBC,CAAqBV,MAkDjE,EAlFA","sources":["src/aboutCompanyPage.js","src/js/counter_services.js","src/js/showDetailsMedicalCard.js"],"sourcesContent":["import './js/toggleLang';\nimport './js/counter_services';\nimport './js/descr_job_vacancy';\nimport './js/slider_licenses';\nimport './js/slider_reviews';\nimport './js/expand_answer_question';\nimport './js/openMobileMenu';\nimport './js/openSocialListClinic';\nimport './js/openLocationBlockClinic';\nimport './js/openModalContacts';\nimport './js/scrollUp';\nimport './js/openModaWindowMap';\nimport './js/openModaWindowLicenes';\nimport './js/openModaWindowVideo';\nimport './js/openModaWindowForm';\nimport './js/showDetailsMedicalCard';\n// import './js/anime';\n","document.addEventListener('DOMContentLoaded', function () {\n    const counterElements = document.querySelectorAll('.number');\n    counterElements.forEach(el => {\n        el.originalValue = parseInt(el.textContent.replace(/\\s+/g, ''), 10); // Сохранение оригинального значения\n        el.textContent = '0'; // Установка начального значения в ноль\n    });\n    const observer = new IntersectionObserver(\n        (entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    const element = entry.target;\n                    const targetNumber = element.originalValue;\n                    setTimeout(() => startCounter(element, targetNumber), 500);\n                    observer.unobserve(element);\n                }\n            });\n        },\n        {\n            threshold: 0.1,\n        }\n    );\n    counterElements.forEach(el => {\n        observer.observe(el);\n    });\n    function startCounter(element, target) {\n        const duration = 1500; // Длительность анимации в миллисекундах\n        const increment = target / (duration / 16); // Обновление каждые 16 мс (приблизительно 60 fps)\n        let current = 0;\n        function updateCounter() {\n            current += increment;\n            if (current < target) {\n                element.textContent = Math.ceil(current).toLocaleString();\n                requestAnimationFrame(updateCounter);\n            } else element.textContent = target.toLocaleString();\n        }\n        updateCounter();\n    }\n});\n","(() => {\n    const refs = {\n        toggleBtnShowDetailsMedicalCard: document.querySelectorAll(\n            '[data-btn-show-medical-card]'\n        ),\n        medicalCard: document.querySelectorAll('[data-medical-card]'),\n        detailsMedicalCard: document.querySelectorAll(\n            '[data-details-medical-card]'\n        ),\n        textDescrDetailsMedicalCard: document.querySelectorAll(\n            '[data-text-descr-details]'\n        ),\n        toggleBtnShowTextDescrDetailsMedicalCard:\n            document.querySelectorAll('[data-show-text]'),\n    };\n\n    refs.textDescrDetailsMedicalCard.forEach((elem, index) =>\n        elem.setAttribute('id', index)\n    );\n    refs.toggleBtnShowTextDescrDetailsMedicalCard.forEach((elem, index) =>\n        elem.setAttribute('id', index)\n    );\n    refs.toggleBtnShowTextDescrDetailsMedicalCard.forEach((elem, index) =>\n        elem.addEventListener('click', () => toggleShowText(index))\n    );\n\n    refs.medicalCard.forEach((elem, index) => elem.setAttribute('id', index));\n    refs.toggleBtnShowDetailsMedicalCard.forEach((elem, index) =>\n        elem.setAttribute('id', index)\n    );\n\n    refs.toggleBtnShowDetailsMedicalCard.forEach((elem, index) =>\n        elem.addEventListener('click', () => toggleClassOnElement(index))\n    );\n\n    function toggleClassOnElement(id) {\n        const medicalCardArray = Array.from(refs.medicalCard);\n        medicalCardArray.forEach((elem, index) => {\n            if (index === id) {\n                elem.classList.toggle('visible_details_medical_card');\n            } else {\n                elem.classList.remove('visible_details_medical_card');\n            }\n        });\n\n        const detailsMedicalCardArray = Array.from(refs.detailsMedicalCard);\n        detailsMedicalCardArray.forEach((elem, index) => {\n            if (index === id) {\n                elem.classList.toggle('show_details');\n            } else {\n                elem.classList.remove('show_details');\n            }\n        });\n\n        const toggleBtnShowDetailsMedicalCardArray = Array.from(\n            refs.toggleBtnShowDetailsMedicalCard\n        );\n        toggleBtnShowDetailsMedicalCardArray.forEach((elem, index) => {\n            if (index === id) {\n                elem.classList.toggle('rotate_btn_show_descr');\n            } else {\n                elem.classList.remove('rotate_btn_show_descr');\n            }\n        });\n    }\n\n    function toggleShowText(id) {\n        refs.textDescrDetailsMedicalCard[id].classList.toggle(\n            'show_text_descr_details'\n        );\n        if (\n            refs.toggleBtnShowTextDescrDetailsMedicalCard[\n                id\n            ].textContent.includes('Читати')\n        ) {\n            refs.toggleBtnShowTextDescrDetailsMedicalCard[id].textContent =\n                'Приховати';\n        } else {\n            refs.toggleBtnShowTextDescrDetailsMedicalCard[id].textContent =\n                'Читати більше';\n        }\n    }\n})();\n"],"names":["parcelRequire","document","addEventListener","counterElements","querySelectorAll","forEach","el","originalValue","parseInt","textContent","replace","observer1","IntersectionObserver","entries","observer","entry","isIntersecting","element","target","targetNumber","setTimeout","increment","current","updateCounter","Math","ceil","toLocaleString","requestAnimationFrame","startCounter","unobserve","threshold","observe","refs","toggleBtnShowDetailsMedicalCard","medicalCard","detailsMedicalCard","textDescrDetailsMedicalCard","toggleBtnShowTextDescrDetailsMedicalCard","elem","index","setAttribute","toggleShowText","id","classList","toggle","includes","Array","from","remove","toggleClassOnElement"],"version":3,"file":"about.793a2db9.js.map"}